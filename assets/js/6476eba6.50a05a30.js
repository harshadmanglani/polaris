"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[722],{7493:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var r=t(4848),i=t(8453);const s={sidebar_position:3},o="Usage",a={id:"usage",title:"Usage",description:"Creating Workflows",source:"@site/docs/usage.md",sourceDirName:".",slug:"/usage",permalink:"/polaris/docs/usage",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/polaris/docs/getting-started"}},l={},d=[{value:"Creating Workflows",id:"creating-workflows",level:2},{value:"Defining a Workflow",id:"defining-a-workflow",level:3},{value:"Defining a Builder",id:"defining-a-builder",level:3},{value:"Defining a Data",id:"defining-a-data",level:3},{value:"Storing Workflows",id:"storing-workflows",level:2},{value:"Running Workflows",id:"running-workflows",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h2,{id:"creating-workflows",children:"Creating Workflows"}),"\n",(0,r.jsx)(n.h3,{id:"defining-a-workflow",children:"Defining a Workflow"}),"\n",(0,r.jsx)(n.p,{children:"A Workflow is a sequence of Builders that will perform some work. Let's take the example of a cab ride workflow. Essentially, for a cab ride workflow, builders (units of work) could be:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User initiating a request"}),"\n",(0,r.jsx)(n.li,{children:"Cabbie match"}),"\n",(0,r.jsx)(n.li,{children:"Cabbie reaches source"}),"\n",(0,r.jsx)(n.li,{children:"Ride starts"}),"\n",(0,r.jsx)(n.li,{children:"Cabbie reaches destination"}),"\n",(0,r.jsx)(n.li,{children:"User makes payment"}),"\n",(0,r.jsx)(n.li,{children:"Ride ends"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Workflows must implement the ",(0,r.jsx)(n.code,{children:"IWorkflow"})," interface."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type IWorkflow interface {\n\tGetWorkflowMeta() WorkflowMeta\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type CabRideWorkflow struct {\n}\n\nfunc (cr CabRideWorkflow) GetWorkflowMeta() WorkflowMeta {\n\treturn WorkflowMeta{\n\t\tBuilders: []IBuilder{\n                    UserInitiation{},\n                    CabbieMatching{},\n                    CabbieArrivalAtSource{},\n                    CabDepartureFromSource{},\n                    CabArrivalAtDest{},\n                    UserPayment{},\n                    RideEnds{}\n\t\t},\n\t\tTargetData: WorkflowTerminated{},\n\t}\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You don't have to sequentially define the builders in order of execution. Polaris will figure it out. However, ",(0,r.jsx)(n.strong,{children:"you should if you can. It helps readability."})]}),"\n",(0,r.jsx)(n.h3,{id:"defining-a-builder",children:"Defining a Builder"}),"\n",(0,r.jsxs)(n.p,{children:["A Builder is a unit of work in the workflow. Builders must implement the ",(0,r.jsx)(n.code,{children:"IBuilder"})," interface."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type IBuilder interface {\n\tGetBuilderInfo() BuilderInfo\n\tProcess(BuilderContext) IData\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Following the same example, for the first unit of work in a cab ride workflow:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"var database Database\nvar cabbieHttpClient CabbieHttpClient \n\ntype UserInitiation struct {\n}\n\nfunc (uI UserInitiation) GetBuilderInfo() BuilderInfo {\n    return BuilderInfo{\n        Consumes: []IData{\n            UserInitiationRequest{},\n        },\n        Produces:  UserInitiationResponse{},\n        Optionals: nil,\n        Accesses:  nil,\n    }\n}\n\nfunc (uI UserInitiation) Process(context BuilderContext) IData {\n    userInitReq := context.get(UserInitiationRequest{})\n    database.save(userInitReq)\n\n    cabbieResponse := cabbieHttpClient.request(RideRequest{\n        userId: userInitReq.userId,\n        source: userInitReq.source,\n        dest: userInitReq.dest\n    })\n\n    return UserInitiationResponse{\n        success: true,\n        etaForCabbie: cabbieResponse.eta\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"defining-a-data",children:"Defining a Data"}),"\n",(0,r.jsxs)(n.p,{children:["A Data is a struct that holds the data that will be consumed and/or produced by steps in your workflow.\nThese objects must implement the ",(0,r.jsx)(n.code,{children:"IData"})," interface, which basically means that they should be a ",(0,r.jsx)(n.code,{children:"struct"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["For a user initiating a cab ride request, this is what the initial ",(0,r.jsx)(n.code,{children:"Data"})," might look like."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type UserInitiationRequest struct{\n    userId string\n    source string\n    dest string\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"storing-workflows",children:"Storing Workflows"}),"\n",(0,r.jsxs)(n.p,{children:["Workflows need to be stored to a database. Whether you're using a key-value store or RDBMS, you need to implement the ",(0,r.jsx)(n.code,{children:"IDataStore"})," interface and pass it to the ",(0,r.jsx)(n.code,{children:"polaris.InitRegistry"})," method."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type IDataStore interface {\n\tWrite(key string, value interface{})\n\tRead(key string) (interface{}, bool)\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"running-workflows",children:"Running Workflows"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'polaris.InitRegistry(dataStore)\npolaris.RegisterWorkflow(workflowKey, workflow)\n\nexecutor := polaris.Executor{\n\tBefore: func(builder reflect.Type, delta []IData) {\n        fmt.Printf("Builder %s is about to be run with new data %v\\n", builder, delta)\n    }\n\tAfter: func(builder reflect.Type, produced IData) {\n        fmt.Printf("Builder %s produced %s\\n", builder, produced)\n    }\n}\n\nresponse, err := executor.Sequential(workflowKey, workflowId, dataDelta)\n\nresponse, err := executor.Parallel(workflowKey, workflowId, dataDelta)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);