"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[722],{7493:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var t=n(4848),o=n(8453);const i={sidebar_position:4},s="Usage",a={id:"usage",title:"Usage",description:"From the root of your Go module, run:",source:"@site/docs/usage.md",sourceDirName:".",slug:"/usage",permalink:"/polaris/usage",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Data Store",permalink:"/polaris/concepts/datastore"},next:{title:"API Reference",permalink:"/polaris/api"}},l={},d=[{value:"Adding Polaris to your Go app",id:"adding-polaris-to-your-go-app",level:2},{value:"Service Startup",id:"service-startup",level:3},{value:"Runtime",id:"runtime",level:3},{value:"Limitations",id:"limitations",level:2},{value:"Workflow versioning",id:"workflow-versioning",level:3},{value:"How does the framework perform at scale?",id:"how-does-the-framework-perform-at-scale",level:2},{value:"Use cases",id:"use-cases",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(r.p,{children:"From the root of your Go module, run:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"go get github.com/harshadmanglani/polaris\n"})}),"\n",(0,t.jsx)(r.h2,{id:"adding-polaris-to-your-go-app",children:"Adding Polaris to your Go app"}),"\n",(0,t.jsxs)(r.p,{children:["Assuming you've already read up on ",(0,t.jsx)("a",{href:"/polaris/concepts/polaris",children:"concepts"}),", let's get started"]}),"\n",(0,t.jsx)(r.p,{children:"We'll break integration in two parts:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Things to do when your Go app is starting up"}),"\n",(0,t.jsx)(r.li,{children:"Things to do at runtime"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"service-startup",children:"Service Startup"}),"\n",(0,t.jsx)(r.p,{children:"This is where you want to"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["Implement the ",(0,t.jsx)("a",{href:"/polaris/concepts/datastore",children:(0,t.jsx)(r.code,{children:"IDataStore"})})," interface and initialize Polaris with it"]}),"\n",(0,t.jsxs)(r.li,{children:["Register your ",(0,t.jsx)("a",{href:"/polaris/concepts/workflow",children:"workflow(s)"})," with Polaris"]}),"\n",(0,t.jsx)(r.li,{children:"Initialize your executor"}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'var dataStore polaris.IDataStore\nvar executor polaris.Executor\n\nvoid init(){\n  dataStore := SomeDataStoreImpl{}\n  polaris.InitRegistry(dataStore)\n\n  polaris.RegisterWorkflow("alphaWorkflowKey", AlphaWorkflow{})\n\n  executor := polaris.Executor{\n    Before: func(builder reflect.Type, delta []IData) {\n      fmt.Printf("Builder %s is about to be run with new data %v\\n", builder, delta)\n    }\n    After: func(builder reflect.Type, produced IData) {\n      fmt.Printf("Builder %s produced %s\\n", builder, produced)\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"runtime",children:"Runtime"}),"\n",(0,t.jsx)(r.p,{children:"This is where you process requests on your server by handing them over to polaris."}),"\n",(0,t.jsx)(r.p,{children:"At runtime, you must"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"Accept the request"}),"\n",(0,t.jsxs)(r.li,{children:["Generate a unique identifier for this request (",(0,t.jsx)(r.code,{children:"uniqueWorkflowId"}),")"]}),"\n",(0,t.jsxs)(r.li,{children:["Pass your request data (ensuring that it would be part of the ",(0,t.jsx)("a",{href:"/polaris/concepts/builder#:~:text=of%20the%20builder.-,Consumes,-%2D%20A%20set%20of",children:(0,t.jsx)(r.code,{children:"Consumes"})})," for the ",(0,t.jsx)("a",{href:"/polaris/concepts/builder",children:(0,t.jsx)(r.code,{children:"Builder"})})," you want to run)"]}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'void main(){\n    http.HandleFunc("/request", RequestHandler)\n\n    fmt.Println("Server running at port 8080...")\n    http.ListenAndServe(":8080", nil)\n}\n\nfunc RequestHandler(w http.ResponseWriter, r *http.Request) {\n    var alpha AlphaConsumes\n    err := json.NewDecoder(r.Body).Decode(&alpha)\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusBadRequest)\n        return\n    }\n\n    uniqueWorkflowId := alpha.Id\n    result := executor.Sequential("alphaWorkflowKey", uniqueWorkflowId, alpha)\n\n    // fetch expected data from the result\n    alphaProcessed, ok := result.get(AlphaProcessed{})\n    if !ok {\n        w.WriteHeader(http.StatusInternalServerError)\n    }\n\n    // do something with alphaProcessed\n    w.WriteHeader(http.StatusOK)\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"limitations",children:"Limitations"}),"\n",(0,t.jsx)(r.h3,{id:"workflow-versioning",children:"Workflow versioning"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"Unless you can afford a 100% downtime ensuring all active workflows move into a terminal state, deploying new code requires ensuring backward compatibility."}),"\n",(0,t.jsx)(r.li,{children:"What this means is - you'll need to a deploy a version of code that is backward compatible for older non terminal workflows while newer ones will execute on the new code."}),"\n",(0,t.jsx)(r.li,{children:"Once the older workflows have completed, a deployment to clean up stale code will be required."}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"how-does-the-framework-perform-at-scale",children:"How does the framework perform at scale?"}),"\n",(0,t.jsx)(r.p,{children:"The framework itself has extremely low overhead. Since execution graphs are generated pre-runtime, all the orchestrator will do at runtime is use the graph and available data to run whichever builders can be run."}),"\n",(0,t.jsx)(r.h2,{id:"use-cases",children:"Use cases"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"You have multi-step workflow executions where each step is dependent on data generated from previous steps."}),"\n",(0,t.jsx)(r.li,{children:"Executions can span one request scope or multiple scopes."}),"\n",(0,t.jsx)(r.li,{children:"Your systems works with reusable components that can be combined in different ways to generate different end-results."}),"\n",(0,t.jsx)(r.li,{children:"Your workflows can pause, resume or even restart from the beginning."}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var t=n(6540);const o={},i=t.createContext(o);function s(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);